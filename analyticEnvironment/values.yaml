# This is a place holder for now. 
statefulset:
  enabled: false

# Replica Count
replicaCount: 1

#nameOverride: ""
fullnameOverride: "shinytest"

imagePullSecrets: []

# Specify the deployment strategy. The provided are defaults
deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 25%
  # type: RollingUpdate

# Information for the first image, rstudio
rstudio:
  podName: rstudio-server
  imageRepository: docker.io/neilkester/thesis-rstudio #rocker/rstudio
  imageTag: v1.3 #4.0.3 #3.6.3
  imagePullPolicy: IfNotPresent
  env:
    firstEnvName: PASSWORD
    firstEnvValue: "mypass"
    secondEnvName: ROOT
    secondEnvValue: "TRUE"
  persistentStorage:
    firstVolName: project-analytics-rstudio-volume
    firstClaimName: analytics-ebs-shiny-pvc
    firstMountPath: "/home/rstudio/project-analytics-files"
  resources: {}
    # cpu: 250m
    # memory: 4800Mi
  service:
    type: NodePort
    rstudioPort: 8787
    rstudioNodePort: 30633 #or 8787
    shinyPort: 3838
    shinyNodePort: 30632
    portProtocol: TCP
    # clusterIP: None
  route: {}
    # enabled: false
    # name: docker
    # portName: docker
    # labels:
    # annotations:
 
# Values passed to the dependent postgres chart
postgresql:
  enabled: false
  postgresqlUsername: postgres
  postgresqlPassword: mypass
  service:
    type: ClusterIP
    port: 5432
  persistence:
    enabled: true
    # If an existing pvc exists (created prior to this chart) it can be passed here.
    existingClaim: analytics-ebs-postgres-pvc
    
    ## The path the volume will be mounted at, useful when using different
    ## PostgreSQL images.
    ##
    mountPath: /bitnami/postgresql

    ## The subdirectory of the volume to mount to, useful in dev environments
    ## and one PV for multiple services.
    ##
    #subPath: ''

    # storageClass: "-"
    #accessModes:
    #  - ReadWriteOnce
    #size: 10Gi
    annotations: {}
    ## selector can be used to match an existing PersistentVolume
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    selector: {}
 

mongodb:
  enabled: false
  auth:
    enabled: true
    rootPassword: "mypass"
    ## MongoDB custom user and database
    ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#creating-a-user-and-database-on-first-run
    ##
    username: "modeler"
    password: "C8dsdfwS=C^"
    database: "modelResults"
  volumePermissions:
    enabled: true
  architecture: standalone
  persistence:
    enabled: true
    # Requires mongodb.persistence.enabled: true
    # If defined, PVC must be created manually before the volume will be bound
    existingClaim: 		analytics-ebs-mongodb-pvc
    #storageClassName: "analytic-local-storage" #"-"
    #accessModes:
    #  - ReadWriteOnce
    #size: 10Gi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
